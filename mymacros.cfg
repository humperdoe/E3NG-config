##### Variables #####

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos  : True ; use custom park coordinates for x,y [True/False] 
variable_custom_park_x   : 10.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y   : 240.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz  : 15.0   ; custom dz value; the value in mm to lift the nozzle when move to park position 
variable_retract         : 1.0   ; the value to retract while PAUSE
variable_cancel_retract  : 3.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract   : 35.0  ; retract speed in mm/s
variable_unretract       : 1.0   ; the value to unretract while RESUME
variable_speed_unretract : 35.0  ; unretract speed in mm/s
variable_speed_hop       : 15.0  ; z move speed in mm/s
variable_speed_move      : 50.0 ; move speed in mm/s
variable_park_at_cancel  : True ; allow to move the toolhead to park while execute CANCEL_PRINT [True,False]
variable_park_at_cancel_x : 10  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
variable_park_at_cancel_y : 240  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
# !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
variable_use_fw_retract  : False ; use fw_retraction instead of the manual version [True/False] 
variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored


### LH Stinger User Variables ###

# Print
variable_accel_factor: 1.0 # Global Acceleration Factor (Scales the acceleration value set by the slicer)
variable_use_multi_bed_mesh_profiles: False # PRINT_START tries matching existing bed mesh profiles with set bet temperature. REQ Profiles: "default", "75", "105"

# Filament
variable_my_end_retract: 12.5 # mm - retract amount at the end of the print. This value is primed back atprint  start.
variable_my_load_len: 65.0 # distance used for filament load
variable_my_load_prime_len: 44.0 # amount of priming/purging after the filament is loaded
variable_my_unload_len: 50.0 # distance used for filament unload
variable_my_purge_len: 50.0 # filament length used by the manual purge macro

# Purge Line
variable_purge_x: 195 # Bed position to purge start the purge line 
variable_purge_y: 42
variable_purge_z: 0.8
variable_purge_length: 20
variable_purge_amount: 100

# Velocity

variable_velocity_start: 150 # Velocity during PRINT_START in mm/s
variable_accel_start: 5000 # Acceleration during PRINT_START in mm2/s

# Positions
variable_nozzle_heat_x: 20 # Safe spot to heat up nozzle during PRINT START and PAUSE - M600 Filament Change
variable_nozzle_heat_y: 20 
variable_nozzle_heat_z: 20 
variable_change_z_min: 80  # Minimum Z height for PAUSE - M600 Filament Change

### LH Stinger Utility Variables ## (These are internal utitly variables used by macros. Don't change them manually)

variable_automeshed: False    # Used internally by other macros to track the autogenerated KAMP mesh.
variable_max_fan: 100 # Part of MAX_FAN
variable_manual_fan: -1 # Part of MAX_FAN
variable_manual_aux: -1 # Part of MAX_FAN
variable_fan_multiplier: 1.0 # Part of MAX_FAN
variable_q_active: False # Part of Qmode

gcode:


##### Macros #####

[virtual_sdcard]
path: ~/printer_data/gcodes
on_error_gcode: 
  RESPOND TYPE=command MSG='Vritual SD error triggered. Starting CANCEL_PRINT'
  CANCEL_PRINT
  OFF

[gcode_macro RESET]
description: RESTART
gcode:
  RESTART


[gcode_macro Heat_Soak]
gcode:
    G28                                  # Home all axis
    PARKBED_HEAT                         # call PARKBED Macro
    SET_PIN PIN=BENTO VALUE=255.00       # Turn on Bento Box
    M190 S105                            # Heat Bed to 105C
    SET_PIN PIN=Bed VALUE=127.50         # Turn on Bed Fan


##### Slicer Macros #####

[gcode_macro PRINT_START]
gcode:        
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set hotendtemp = params.HOTEND|int %}
    {% set autopurge = params.AUTOPURGE| default(0) | int %}
    {% set automesh = params.AUTOMESH| default(0) | int %}
    {% set quietmode = params.QUIETMODE| default(0) | int %}

    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    SAVE_GCODE_STATE NAME=print_start
    G90 
    M83

    RESPOND TYPE=command MSG='Heating Bed. Please wait'
    M190 S{bedtemp} # Heat bed and wait
    M104 S{hotendtemp-60} # Pre-heat hotend to target-60C to prevent oozing 
    
    SET_VELOCITY_LIMIT VELOCITY=150 ACCEL=2000 # Lower velocity for setup moves
    G28 # home
    Z_TILT_ADJUST SAMPLES=1 RETRY_TOLERANCE=0.02
    G28 Z
      BED_MESH_CLEAR
      BED_MESH_CALIBRATE ADAPTIVE=1 METHOD=rapid_scan
      #SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=automeshed VALUE=True
    PARKFRONTLOW
    M109 S{hotendtemp} # Heat hotend and wait

    {% if autopurge == 0 %}
      G1 E{client.my_end_retract} F{10*60} # Prime nozzle
    {% else %}
      _PURGE_LINE
    {% endif %}
    
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel}  # Restore velocity to default
    G92 E0 # Reset Extruder
    RESPOND TYPE=command MSG='Print Started'
    RESTORE_GCODE_STATE NAME=print_start
    G90


[gcode_macro PRINT_END]
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    G91 # Absolute pos
    M83 # Relative Extrude
    G92 E0 # Reset Extruder
    G1 E-0.2 F{60*60} # Retract End Print 
    G1 X-15 Z2 E-0.8 F{60*600} # Retract End Print Move

    #Tip Forming and Filament Park
    G1 E-{(client.my_end_retract-2.5)/2} F{10*60}
    G1 E2 F{80*60}
    G1 E-{(client.my_end_retract-0.5)/2} F{10*60}
    
    TURN_OFF_HEATERS # Safety call in case Park Fails
    RESPOND TYPE=command MSG='Print Ended! Turning things off.'
    {% if client.automeshed == True %}  # Clear KAMMP Bed Mesh
      BED_MESH_CLEAR
      BED_MESH_PROFILE REMOVE=default
    {% endif %}

    G90 # Absolute pos
    _TOOLHEAD_PARK_PAUSE_CANCEL
    OFF
    M117 Done!
    SET_SKEW CLEAR=1


[gcode_macro OFF]
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    M84                                  # turn steppers off
    TURN_OFF_HEATERS                     # turn bed / hotend off
    M107                                 # turn fans off
    M106 S0                              # force part fan off
    SET_PIN PIN=BENTO VALUE=0            # Turn OFF Bento Box
    SET_PIN PIN=Bed VALUE=0              # Turn OFF Bed Fan
    #SET_FAN_SPEED FAN=Exhaust SPEED=0   # turn exhaust fan off
    #SET_FAN_SPEED FAN=BedFans SPEED=0   # bed fan off
    #SET_PIN PIN=caselight VALUE=0       # turn case light off
    RESPOND TYPE=command MSG='All OFF'


[gcode_macro M109] # Wait Hotend Temp
rename_existing: M109.1
gcode:
    #Parameters
    {% set s = params.S|float %}
    
    M104 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}  # Set hotend temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={s} MAXIMUM={s+1}   # Wait for hotend temp (within 1 degree)
    {% endif %}


[gcode_macro M190] # Wait Bed Temp
rename_existing: M190.1
gcode:
    #Parameters
    {% set s = params.S|float %}

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}   # Set bed temp
    {% if s != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={s} MAXIMUM={s+1}  # Wait for bed temp (within 1 degree)
    {% endif %}


##### Acceleration #####

[gcode_macro SET_VELOCITY_LIMIT] # Set Velocity Limits 
rename_existing:            _SET_VELOCITY_LIMIT
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    
    {% if client.q_active == True %} # Qmode behaviour
      {% set get_params = "" %}
      {% if 'VELOCITY' in params %}
        {% set get_params = (get_params + ' ' + 'VELOCITY=' + [params.VELOCITY | int, client.q_max_velocity] | min | string) %}
      {% endif %}
      {% if 'ACCEL' in params %}
        {% set lim_accel = [(params.ACCEL | float * client.q_accel_factor) | int, client.q_max_accel] | min %}
        {% set get_params = (get_params + ' ' + 'ACCEL=' + lim_accel | string) %}
      {% endif %}
      {% if 'SQUARE_CORNER_VELOCITY' in params %}
        {% set get_params = (get_params + ' ' + 'SQUARE_CORNER_VELOCITY=' + [params.SQUARE_CORNER_VELOCITY | int, client.q_scv] | min | string) %}
      {% endif %}
      {% if 'MINIMUM_CRUISE_RATIO' in params %}
        {% set get_params = (get_params + ' ' + 'MINIMUM_CRUISE_RATIO=' + [params.MINIMUM_CRUISE_RATIO | float, client.q_min_cruise] | max | string) %}
      {% endif %}
      _SET_VELOCITY_LIMIT { get_params }
      
    {% else %}
      {% set get_params = "" %}
      {% if 'VELOCITY' in params %}
        {% set get_params = (get_params + ' ' + 'VELOCITY=' + params.VELOCITY | string) %}
      {% endif %}
      {% if 'ACCEL' in params %}
        {% set get_params = (get_params + ' ' + 'ACCEL=' + (params.ACCEL | int * client.accel_factor) | string) %}
      {% endif %}
      {% if 'MINIMUM_CRUISE_RATIO' in params %}
        {% set get_params = (get_params + ' ' + 'MINIMUM_CRUISE_RATIO=' + params.MINIMUM_CRUISE_RATIO | string) %}
      {% endif %}
      {% if 'SQUARE_CORNER_VELOCITY' in params %}
        {% set get_params = (get_params + ' ' + 'SQUARE_CORNER_VELOCITY=' + params.SQUARE_CORNER_VELOCITY | string) %}
      {% endif %}
      _SET_VELOCITY_LIMIT { get_params }
      
    {% endif %}


[gcode_macro M204] # Set Acceleration
rename_existing:            M204.1

gcode:
    {% if 'P' in params %}
      {% set my_s = params.P %}
    {% elif 'S' in params %}
      {% set my_s = params.S %}
    {% elif 'T' in params %}
      {% set my_s = params.T %}
    {% endif %}
    {% if my_s is defined %}
      SET_VELOCITY_LIMIT ACCEL={my_s|float}  
    {% endif %}

 

[gcode_macro M107] # Fans OFF
rename_existing:            M107.1
gcode:
    M106 S0
    M106 P2 S0


##### Filament Management #####

[gcode_macro M600]
description: Filament change
gcode: 
  PAUSE X=10 Y=10 Z_MIN=50
  FILAMENT_UNLOAD
  M117 Insert new filament


[gcode_macro FILAMENT_LOAD]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set EXTRUDER_TEMP = params.TEMP | default(230) | int %}
  M109 S{EXTRUDER_TEMP}            #set hotend temperature and wait
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

  SAVE_GCODE_STATE NAME=load_state
  M83                            # set extruder to relative
  G1 E{client.my_load_len} F800                    # load
  G1 E{client.my_load_prime_len} F250                    # prime nozzle with filament
  G1 E-8 F600
  RESTORE_GCODE_STATE NAME=load_state


[gcode_macro FILAMENT_UNLOAD]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  {% set EXTRUDER_TEMP = params.TEMP | default(230) | int %}
  M109 S{EXTRUDER_TEMP}            #set hotend temperature and wait
  TEMPERATURE_WAIT SENSOR=extruder MINIMUM={EXTRUDER_TEMP}

  SAVE_GCODE_STATE NAME=unload_state
  #M106 S0 # Turn off fan
  M83                            # set extruder to relative

  G0 E2 F300                                        # extract filament to cold end
  G0 E-8 F2000                                      # extract filament to cold end
  G4 P4000                                          # wait for 4 seconds
  G0 E8 F2000                                       # push back the filament to strive stringing
  G0 E-27 F2150                                     # Extract fast in the cold zone
  G1 E-{client.my_unload_len} F300                  # Pull rest. Continue extraction slow allow filament to be cooled enough before reaches the gears
  RESTORE_GCODE_STATE NAME=unload_state


[gcode_macro FILAMENT_PURGE]
gcode:
  {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
  SAVE_GCODE_STATE NAME=purge_state
  #M106 S0 # Turn off fan
  M83    
  G1 E{client.my_purge_len} F250                    # prime nozzle with filament
  RESTORE_GCODE_STATE NAME=purge_state


[gcode_macro COLD_PULL]  # Experimental. Requires lowering extruder print min temp
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(220) %}
    {% set PULLTEMP = params.PULLTEMP|default(85) %}
    G90
    M83
    G92 E0
    M109 S{EXTRUDER} 
    M104 S{PULLTEMP}
    M106 S120   #fan on
    G1 E7 F100
    G1 E5 F5
    M109 S{PULLTEMP}
    G1 E-15 F45
    G1 E-100 F300
    G92 E0
    M106 S0
    M104 S0
    M84

[gcode_macro _PURGE_LINE] # Purge line
gcode:
    {% set client = printer['gcode_macro _CLIENT_VARIABLE'] %}
    G90 
    M83
    G0 X{client.purge_x} Y{client.purge_y} Z{client.purge_z} F12000
    G1 E{client.my_end_retract} F500
    G1 X{client.purge_x+client.purge_length} Y{client.purge_y} E{0.2*client.purge_amount} F500
    G1 X{client.purge_x+client.purge_length+5} E-0.2 F1000
    G1 Y{client.purge_y+30} Z{client.purge_z+10} E-0.5 F18000 
    G1 E0.2 F600
    
 ##### Force Moves #####

[gcode_macro FORCE_UP]
gcode:
  SET_KINEMATIC_POSITION X=127 Y=127 Z=150
  G90
  G1 Z180
  M84


[gcode_macro FORCE_DOWN]
gcode:
  SET_KINEMATIC_POSITION X=127 Y=127 Z=150
  G90
  G1 Z100
  M84




[gcode_macro FORCE_SET_POS]
gcode:

    {% if 'resonance_tester' in printer.configfile.settings %}
    {% set home = printer.configfile.settings.resonance_tester.probe_points[0] %}
    {% endif %}

    {% set K_X = params.X| default(home[0] if home else 127 ) | float %}
    {% set K_Y = params.Y| default(home[1] if home else 127) | float %}
    {% set K_Z = params.Z| default(home[2] if home else 0) | float %}

    SET_KINEMATIC_POSITION X={K_X} Y={K_Y} Z={K_Z}
    
    G91
    G1 X0.001 Y0.001 Z0.001
    G1 X-0.001 Y-0.001 Z-0.001
    G90 



##### Park by Ellis #####

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               # absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              # absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              # absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               # absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                # absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED
    
# Park 15mm above center of bed
[gcode_macro PARKBED_HEAT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           # home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED_HEAT
    G90                                # absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z100 F3000                                     
    RESTORE_GCODE_STATE NAME=PARKBED_HEAT




[gcode_macro DUMP_VARIABLES]  # by Ellis
gcode:
    {% set filter_name = params.NAME|default('')|string|lower %}
    {% set filter_value = params.VALUE|default('')|string|lower %}
    {% set show_cfg = params.SHOW_CFG|default(0)|int %}
    
    {% set out = [] %}

    {% for key1 in printer %}
        {% for key2 in printer[key1] %}
            {% if (show_cfg or not (key1|lower == 'configfile' and key2|lower in ['config', 'settings'])) and (filter_name in key1|lower or filter_name in key2|lower) and filter_value in printer[key1][key2]|string|lower %}
                {% set dummy = out.append("printer['%s'].%s = %s" % (key1, key2, printer[key1][key2])) %}
            {% endif %}
        {% else %}
            {% if filter_name in key1|lower and filter_value in printer[key1]|string|lower %}
                {% set dummy = out.append("printer['%s'] = %s" % (key1, printer[key1])) %}
            {% endif %}
        {% endfor %}
    {% endfor %}
    
    {action_respond_info(out|join("\n"))}

[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}


  
